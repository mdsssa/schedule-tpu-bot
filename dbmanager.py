import sqlite3 as sql
import time

from colorama import Fore
import os
#id username course school group sub 
stPatch = './info.db'
def r(text):
    print(f'{Fore.RED}{text}{Fore.RESET}')
def g(text):
    print(f'{Fore.GREEN}{text}{Fore.RESET}')
def b(text):
    print(f'{Fore.BLUE}{text}{Fore.RESET}')
tables = {
    'date' : '(date integer)' ,
    'users' : "(id integer , username string , course integer , school string , 'group' string , sub integer)" ,
    'Friends' : "(id integer , friendName string , friendcourse integer , friendschool string , friendgroup string , Friendid integer)"
}
def makeDb():
    try:
        for table in tables:
            db = sql.connect(stPatch)
            db.cursor().execute(f'CREATE TABLE IF NOT EXISTS {table} {tables[table]};')
            db.commit()
            db.close()
    except Exception as e:
        print(e)
def DateManager(datenow:int = 0) -> int:
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute('SELECT * FROM date')
        a = cursor.fetchall()[0][0]
        if datenow == a:
            db.close()
            return False
        cursor.execute('DELETE FROM date')
        cursor.execute('INSERT INTO date VALUES (?)' , (datenow ,))
        db.commit()
        db.close()
        g(f'–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {datenow}')
        return True
    except Exception as e:
        r(f"–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return False
    
def getUserInfo(id):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor().execute(f'SELECT * FROM users WHERE id = {id}')
        a = cursor.fetchall()[0]
        db.close()
        return a
    except Exception as e:
        r(f"{e}")
def getAllSubscribedUsers() -> list:
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        info = cursor.execute('SELECT * FROM users WHERE sub = 1')
        a = info.fetchall()
        db.close()
        return a
    except Exception as e:
        r(f"–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return []

def registrate_user(id:int , username:str ,  course:int , school:str , group:str , sub:bool = True) -> None:
    try:
        if not isUserInDb(id):
            db = sql.connect(stPatch)
            cursor = db.cursor()
            cursor.execute('INSERT INTO users VALUES (? , ? , ? , ? , ? , ?)' , (id , username ,course ,school.upper() , group.upper() , int(sub)))
            db.commit()
            db.close()
            g('–Æ–∑–µ—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
            return f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã , –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ : \n–ö—É—Ä—Å - {course} \n–®–∫–æ–ª–∞ - {school} \n–ì—Ä—É–ø–ø–∞ - {group}"
        else:
            r('–Æ–∑–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞—Ç–∞–±–∞–∑–µ!')
            return '–í—ã —É–∂–µ –µ—Å—Ç—å –≤ –¥–∞—Ç–∞–±–∞–∑–µ!'
    except Exception as e:
        r(f"–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return f"–ü—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

def updateUserName(id , username):
    try:
         db = sql.connect(stPatch)
         cursor = db.cursor()
         cursor.execute('UPDATE users SET username = ? WHERE id = ?' , (username , id))
         db.commit()
         db.close()
         g(f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
    except Exception as e:
        r(f"–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def updateUserSub(id , sub):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute('UPDATE users SET sub = ? WHERE id = ?' , (int(sub) , id))
        db.commit()
        db.close()
        if sub:
            g(f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!')
        else:
            r(f'–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞')
    except Exception as e:
        r(f"–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
def isUserInDb(id):
    db = sql.connect(stPatch)
    cursor = db.cursor().execute(f'SELECT * FROM users WHERE id = {id}')
    a = cursor.fetchall()
    db.close()
    return len(a) > 0


def checkUserSub(id):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        info = cursor.execute(f'SELECT sub FROM users WHERE id = {id}')
        a = info.fetchone()[0]
        db.close()
        return bool(a)
    except Exception as e:
        r(f"–ü—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

def deleteUser(id):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute(f"DELETE FROM users WHERE id = {id}")
        db.commit()
        db.close()
        r(f'–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id} —É–¥–∞–ª–µ–Ω')
    except Exception as e:
        r(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}')
def getUserProfile(id):
    try:
        if not isUserInDb(id):
            return '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è , –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–º–∞–Ω–¥–æ–π /registration.'
        else:
            db = sql.connect(stPatch)
            cursor = db.cursor()
            info = cursor.execute(f'SELECT * FROM users WHERE id = {id}')
            info = info.fetchone()
            db.close()
            return f'''{"–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüì¨" if bool(info[-1]) else "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—Éüì≠"}
–ö—É—Ä—Å - {info[2]}
–®–∫–æ–ª–∞ - {info[3]}
–ì—Ä—É–ø–ø–∞ - {info[4]}'''
    except Exception as e:
        r(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {id}')
        return r(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ {e} –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è')
def getfriends(id):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        info = cursor.execute(f'SELECT * FROM Friends WHERE id = {id}')
        info = info.fetchall()
        db.close()
        return info
    except Exception as e:
        print(e)
#{'873729188': {'id': 873729188, 'course': '2', 'school': '–ò–®–ü–†', 'group': '234', 'name': '234'}}
#'Friends' : "(id integer , friendName string , friendcourse integer , friendschool string , friendgroup string , Friendid integer)"
def addFriends(id , course , school  , group , name):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute("INSERT INTO Friends VALUES (? , ? , ? , ? , ? , ?)" , (id , name, course, school, group , len(getfriends(id))))
        db.commit()
        db.close()
    except Exception as e:
        print(e)
def deleteFriends(id , index):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute(f"DELETE FROM Friends WHERE id = {id} AND Friendid = {index}")
        db.commit()
        db.close()
    except Exception as e:
        print(e)

def getFriend(id , index):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        info = cursor.execute(f'SELECT * FROM Friends WHERE id = ? AND Friendid = ?' , (id , index))
        info = info.fetchall()
        db.close()
        return info

    except Exception as e:
        print(e)
def fixFriendsIds(id):
    try:
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute('SELECT * FROM Friends WHERE id = ?', (id,))
        info = cursor.fetchall()
        fixed = []
        db.close()
        for i , friend in enumerate(info):
            fixed.append((friend[0], friend[1] , friend[2] , friend[3] , friend[4] , i))
        db = sql.connect(stPatch)
        cursor = db.cursor()
        cursor.execute('DELETE FROM Friends WHERE id = ?', (id,))
        db.commit()
        for friend in fixed:
            cursor.execute(f"INSERT INTO Friends VALUES {str(friend)}")
        db.commit()
        db.close()
    except Exception as e:
        print(e)
if __name__ == '__main__':
    makeDb()
    # DateManager(datenow= 12)
    print(checkUserSub(873729188))